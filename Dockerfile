# We're using a lightweight Node.js image (version 16) based on Alpine Linux for efficiency.
FROM node:16-alpine AS build

# This creates a directory called /app inside the container and sets it as the working directory
WORKDIR /app

# This step copies the package.json and package-lock.json into the container to install the necessary dependencies.
COPY package*.json ./

# Run npm install to install all the required dependencies for the application.
RUN npm install

# After installing the dependencies, copy the rest of the application code from the host machine into the container.
COPY . .

# Run the build command to create optimized static files in the 'build' directory.
RUN npm run build

# We'll use Nginx to serve the static files generated by the build process.
FROM nginx:alpine

# This copies the production-ready static files from the build directory to the Nginx container.
COPY --from=build /app/build /usr/share/nginx/html

# Nginx runs on port 80 by default, so we'll expose this port to access the app.
EXPOSE 80

# The CMD command tells Docker to run Nginx with the necessary configurations.
CMD ["nginx", "-g", "daemon off;"]


